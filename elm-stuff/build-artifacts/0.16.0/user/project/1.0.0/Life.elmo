Elm.Life = Elm.Life || {};
Elm.Life.make = function (_elm) {
   "use strict";
   _elm.Life = _elm.Life || {};
   if (_elm.Life.values) return _elm.Life.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Patterns = Elm.Patterns.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var neighbouringCoords = function (_p0) {
      var _p1 = _p0;
      var _p3 = _p1._1;
      var _p2 = _p1._0;
      return _U.list([{ctor: "_Tuple2",_0: _p2 - 1,_1: _p3 - 1}
                     ,{ctor: "_Tuple2",_0: _p2 - 1,_1: _p3}
                     ,{ctor: "_Tuple2",_0: _p2 - 1,_1: _p3 + 1}
                     ,{ctor: "_Tuple2",_0: _p2,_1: _p3 - 1}
                     ,{ctor: "_Tuple2",_0: _p2,_1: _p3 + 1}
                     ,{ctor: "_Tuple2",_0: _p2 + 1,_1: _p3 - 1}
                     ,{ctor: "_Tuple2",_0: _p2 + 1,_1: _p3}
                     ,{ctor: "_Tuple2",_0: _p2 + 1,_1: _p3 + 1}]);
   };
   var Cell = F5(function (a,b,c,d,e) {    return {x: a,y: b,height: c,width: d,alive: e};});
   var cells = F2(function (rows,columns) {
      return A2($List.concatMap,
      function (y) {
         return A2($List.map,
         function (x) {
            var y$ = (0 - y) * 10 + 400;
            var x$ = x * 10 - 400;
            var alive = A2($List.member,{ctor: "_Tuple2",_0: x,_1: y},$Patterns.horizontal3);
            return {ctor: "_Tuple2",_0: {ctor: "_Tuple2",_0: x,_1: y},_1: A5(Cell,x$,y$,10,10,alive)};
         },
         _U.range(0,columns));
      },
      _U.range(0,rows));
   });
   return _elm.Life.values = {_op: _op,Cell: Cell,cells: cells,neighbouringCoords: neighbouringCoords};
};