Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Patterns = Elm.Patterns.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Set = Elm.Set.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm);
   var _op = {};
   var cell = function (_p0) {
      var _p1 = _p0;
      return A2($Graphics$Collage.move,
      {ctor: "_Tuple2",_0: $Basics.toFloat(_p1.x),_1: $Basics.toFloat(_p1.y)},
      A2($Graphics$Collage.filled,_p1.alive ? $Color.black : $Color.white,A2($Graphics$Collage.rect,$Basics.toFloat(_p1.width),$Basics.toFloat(_p1.height))));
   };
   var view = function (_p2) {    var _p3 = _p2;return A3($Graphics$Collage.collage,800,800,A2($List.map,cell,$Dict.values(_p3.generation)));};
   var numAliveNeighbours = F2(function (dict,_p4) {
      var _p5 = _p4;
      var _p7 = _p5._1;
      var _p6 = _p5._0;
      var livingStatus = F2(function (coord,acc) {
         return A2($Maybe.withDefault,acc,A2($Maybe.map,function (cell) {    return cell.alive ? acc + 1 : acc;},A2($Dict.get,coord,dict)));
      });
      var neighbours = _U.list([{ctor: "_Tuple2",_0: _p6 - 1,_1: _p7 - 1}
                               ,{ctor: "_Tuple2",_0: _p6 - 1,_1: _p7}
                               ,{ctor: "_Tuple2",_0: _p6 - 1,_1: _p7 + 1}
                               ,{ctor: "_Tuple2",_0: _p6,_1: _p7 - 1}
                               ,{ctor: "_Tuple2",_0: _p6,_1: _p7 + 1}
                               ,{ctor: "_Tuple2",_0: _p6 + 1,_1: _p7 - 1}
                               ,{ctor: "_Tuple2",_0: _p6 + 1,_1: _p7}
                               ,{ctor: "_Tuple2",_0: _p6 + 1,_1: _p7 + 1}]);
      return A3($List.foldr,livingStatus,0,neighbours);
   });
   var handleLivingCell = F3(function (dict,coord,cell) {
      var n = A2(numAliveNeighbours,dict,coord);
      return _U.cmp(n,2) < 0 || _U.cmp(n,3) > 0 ? _U.update(cell,{alive: false}) : cell;
   });
   var handleDeadCell = F3(function (dict,coord,cell) {
      var n = A2(numAliveNeighbours,dict,coord);
      return _U.eq(n,3) ? _U.update(cell,{alive: true}) : cell;
   });
   var handleCell = F3(function (dict,coord,cell) {
      var _p8 = cell.alive;
      if (_p8 === true) {
            return A3(handleLivingCell,dict,coord,cell);
         } else {
            return A3(handleDeadCell,dict,coord,cell);
         }
   });
   var update = F2(function (_p9,model) {
      var folder = F2(function (coord,newModel) {
         var newCell = A2($Maybe.map,A2(handleCell,model.generation,coord),A2($Dict.get,coord,model.generation));
         var _p10 = newCell;
         if (_p10.ctor === "Just") {
               var _p11 = _p10._0;
               return _U.update(newModel,
               {generation: A3($Dict.insert,coord,_p11,newModel.generation)
               ,livingCells: _p11.alive ? A2($Set.insert,coord,newModel.livingCells) : newModel.livingCells});
            } else {
               return newModel;
            }
      });
      return A3($Set.foldr,folder,model,model.livingCells);
   });
   var Cell = F5(function (a,b,c,d,e) {    return {x: a,y: b,height: c,width: d,alive: e};});
   var cells = F2(function (rows,columns) {
      return A2($List.concatMap,
      function (y) {
         return A2($List.map,
         function (x) {
            var y$ = (0 - y) * 10 + 400;
            var x$ = x * 10 - 400;
            var alive = A2($List.member,{ctor: "_Tuple2",_0: x,_1: y},$Patterns.gliderGun);
            return {ctor: "_Tuple2",_0: {ctor: "_Tuple2",_0: x,_1: y},_1: A5(Cell,x$,y$,10,10,alive)};
         },
         _U.range(0,columns));
      },
      _U.range(0,rows));
   });
   var Model = F2(function (a,b) {    return {generation: a,livingCells: b};});
   var init = F2(function (rows,columns) {
      var cells$ = A2(cells,rows,columns);
      var livingCells = $Set.fromList(A2($List.map,
      $Basics.fst,
      A2($List.filter,function (_p12) {    return function (_) {    return _.alive;}($Basics.snd(_p12));},cells$)));
      return A2(Model,$Dict.fromList(cells$),A2($Debug.log,"lc",livingCells));
   });
   var main = A2($Signal.map,view,A3($Signal.foldp,update,A2(init,70,70),$Time.fps(20)));
   return _elm.Main.values = {_op: _op
                             ,Model: Model
                             ,Cell: Cell
                             ,init: init
                             ,cells: cells
                             ,update: update
                             ,numAliveNeighbours: numAliveNeighbours
                             ,handleLivingCell: handleLivingCell
                             ,handleDeadCell: handleDeadCell
                             ,handleCell: handleCell
                             ,view: view
                             ,cell: cell
                             ,main: main};
};