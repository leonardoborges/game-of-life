Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Patterns = Elm.Patterns.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Set = Elm.Set.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Utils = Elm.Utils.make(_elm),
   $VirtualDom = Elm.VirtualDom.make(_elm);
   var _op = {};
   var cellView = function (_p0) {
      var _p1 = _p0;
      return A2($Graphics$Collage.move,
      {ctor: "_Tuple2",_0: $Basics.toFloat(_p1.x),_1: $Basics.toFloat(_p1.y)},
      A2($Graphics$Collage.filled,_p1.alive ? $Color.black : $Color.white,A2($Graphics$Collage.rect,$Basics.toFloat(_p1.width),$Basics.toFloat(_p1.height))));
   };
   var neighbouringCoords = function (_p2) {
      var _p3 = _p2;
      var _p5 = _p3._1;
      var _p4 = _p3._0;
      return _U.list([{ctor: "_Tuple2",_0: _p4 - 1,_1: _p5 - 1}
                     ,{ctor: "_Tuple2",_0: _p4 - 1,_1: _p5}
                     ,{ctor: "_Tuple2",_0: _p4 - 1,_1: _p5 + 1}
                     ,{ctor: "_Tuple2",_0: _p4,_1: _p5 - 1}
                     ,{ctor: "_Tuple2",_0: _p4,_1: _p5 + 1}
                     ,{ctor: "_Tuple2",_0: _p4 + 1,_1: _p5 - 1}
                     ,{ctor: "_Tuple2",_0: _p4 + 1,_1: _p5}
                     ,{ctor: "_Tuple2",_0: _p4 + 1,_1: _p5 + 1}]);
   };
   var numAliveNeighbours = F2(function (dict,coord) {
      var livingStatus = F2(function (coord,acc) {
         return A2($Maybe.withDefault,acc,A2($Maybe.map,function (cell) {    return cell.alive ? acc + 1 : acc;},A2($Dict.get,coord,dict)));
      });
      var neighbours = neighbouringCoords(coord);
      return A3($List.foldr,livingStatus,0,neighbours);
   });
   var toggleIf = F3(function (pred,cell,n) {    return pred(n) ? _U.update(cell,{alive: $Basics.not(cell.alive)}) : cell;});
   var updateCell = F3(function (dict,coord,cell) {
      var n = A2(numAliveNeighbours,dict,coord);
      var _p6 = cell.alive;
      if (_p6 === true) {
            return A3(toggleIf,function (n) {    return _U.cmp(n,2) < 0 || _U.cmp(n,3) > 0;},cell,n);
         } else {
            return A3(toggleIf,F2(function (x,y) {    return _U.eq(x,y);})(3),cell,n);
         }
   });
   var advanceGeneration = F3(function (generation,coord,_p7) {
      var _p8 = _p7;
      var _p13 = _p8._1;
      var _p12 = _p8._0;
      var updateModel = function (_p9) {
         var _p10 = _p9;
         var _p11 = _p10._1;
         return {ctor: "_Tuple2"
                ,_0: A3($Dict.insert,coord,_p11,_p12)
                ,_1: !_U.eq(_p10._0.alive,_p11.alive) ? A2($List.append,_p13,A2($List._op["::"],coord,neighbouringCoords(coord))) : _p13};
      };
      return A2($Maybe.withDefault,
      {ctor: "_Tuple2",_0: _p12,_1: _p13},
      A2($Maybe.map,
      updateModel,
      A2($Maybe.map,
      A2($Utils.ap,F2(function (v0,v1) {    return {ctor: "_Tuple2",_0: v0,_1: v1};}),A2(updateCell,generation,coord)),
      A2($Dict.get,coord,generation))));
   });
   var Restart = function (a) {    return {ctor: "Restart",_0: a};};
   var radio = F2(function (address,key) {
      return _U.list([A2($Html.input,
                     _U.list([$Html$Attributes.type$("radio")
                             ,$Html$Attributes.name("pattern")
                             ,$Html$Attributes.value(key)
                             ,A3($Html$Events.on,"change",$Html$Events.targetChecked,function (_p14) {    return A2($Signal.message,address,Restart(key));})]),
                     _U.list([]))
                     ,$Html.text(key)]);
   });
   var options = function (address) {    return A2($List.concatMap,radio(address),_U.list(["glider","gliderGun","grower","dieHard","horizontal"]));};
   var view = F2(function (address,_p15) {
      var _p16 = _p15;
      var _p18 = _p16.config;
      var view$ = F2(function (coord,cells) {
         return A2($Maybe.withDefault,
         cells,
         A2($Maybe.map,
         function (_p17) {
            return A3($Basics.flip,F2(function (x,y) {    return A2($List._op["::"],x,y);}),cells,cellView(_p17));
         },
         A2($Dict.get,coord,_p16.generation)));
      });
      var grid = $Html.fromElement(A3($Graphics$Collage.collage,
      $Basics.round(_p18.width),
      $Basics.round(_p18.height),
      A3($Set.foldr,view$,_U.list([]),_p16.livingCells)));
      return A2($Html.div,_U.list([]),A2($Basics._op["++"],options(address),_U.list([grid])));
   });
   var AdvanceGeneration = {ctor: "AdvanceGeneration"};
   var Config = F4(function (a,b,c,d) {    return {rows: a,columns: b,height: c,width: d};});
   var Cell = F5(function (a,b,c,d,e) {    return {x: a,y: b,height: c,width: d,alive: e};});
   var cells = F2(function (_p19,pattern) {
      var _p20 = _p19;
      var makeCell = function (_p21) {
         var _p22 = _p21;
         var _p24 = _p22._1;
         var _p23 = _p22._0;
         var y$ = (0 - _p24) * 10 + $Basics.round(_p20.height / 2);
         var x$ = _p23 * 10 - $Basics.round(_p20.width / 2);
         var alive = A2($List.member,{ctor: "_Tuple2",_0: _p23,_1: _p24},pattern);
         return {ctor: "_Tuple2",_0: {ctor: "_Tuple2",_0: _p23,_1: _p24},_1: A5(Cell,x$,y$,10,10,alive)};
      };
      return A2($List.map,makeCell,A2($Utils.grid2d,_p20.rows,_p20.columns));
   });
   var Model = F3(function (a,b,c) {    return {generation: a,livingCells: b,config: c};});
   var init = F2(function (config,pattern) {
      var cells$ = A2(cells,config,pattern);
      var livingCells = $Set.fromList(A2($List.concatMap,
      A2($Utils.ap,F2(function (x,y) {    return A2($List._op["::"],x,y);}),neighbouringCoords),
      A2($List.map,$Basics.fst,A2($List.filter,function (_p25) {    return function (_) {    return _.alive;}($Basics.snd(_p25));},cells$))));
      return A3(Model,$Dict.fromList(cells$),livingCells,config);
   });
   var update = F2(function (action,model) {
      var _p26 = action;
      if (_p26.ctor === "AdvanceGeneration") {
            var _p27 = A3($Set.foldr,advanceGeneration(model.generation),{ctor: "_Tuple2",_0: model.generation,_1: _U.list([])},model.livingCells);
            var generation$ = _p27._0;
            var livingCells$ = _p27._1;
            return _U.update(model,{generation: generation$,livingCells: $Set.fromList(livingCells$)});
         } else {
            return A2(init,model.config,$Patterns.getPattern(_p26._0));
         }
   });
   var main = function () {
      var initialModel = A2(init,A4(Config,100,100,800,800),$Patterns.gliderGun2);
      var tick = A2($Signal.map,$Basics.always(AdvanceGeneration),$Time.fps(20));
      var actions = $Signal.mailbox(AdvanceGeneration);
      return A2($Signal.map,view(actions.address),A3($Signal.foldp,update,initialModel,A2($Signal.merge,tick,actions.signal)));
   }();
   return _elm.Main.values = {_op: _op
                             ,Model: Model
                             ,Cell: Cell
                             ,Config: Config
                             ,init: init
                             ,cells: cells
                             ,AdvanceGeneration: AdvanceGeneration
                             ,Restart: Restart
                             ,update: update
                             ,advanceGeneration: advanceGeneration
                             ,updateCell: updateCell
                             ,toggleIf: toggleIf
                             ,numAliveNeighbours: numAliveNeighbours
                             ,neighbouringCoords: neighbouringCoords
                             ,view: view
                             ,cellView: cellView
                             ,options: options
                             ,radio: radio
                             ,main: main};
};